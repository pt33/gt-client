#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app')
let debug = require('debug')('gt-client:server')
let http = require('http')

let cluster = require('cluster')
let numCPUs = require('os').cpus().length

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '8086')
app.set('port', port)
app.set('trust proxy', true)
if (cluster.isMaster) {
    for (let i = 0; i < numCPUs; i++) {
        cluster.fork()
    }

    cluster.on('listening', onListening)

    cluster.on('error', onError)

    cluster.on('exit', (worker, code, signal) => {
        console.log('worker ' + worker.process.pid + ' died')
        cluster.fork()
    })
} else {
    app.listen(app.get('port'), '0.0.0.0')
}

/**
 * Create HTTP server.
 */

//let server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

//server.listen(port)


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(worker,address) {
    debug('worker ' + worker.process.pid +', listen: '+address.address+":"+address.port)
}
