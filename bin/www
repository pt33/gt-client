#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app')
const debug = require('debug')('gt-client:server')
const cluster = require('cluster')
const numCPUs = require('os')
    .cpus().length

let port = normalizePort(process.env.PORT || '8086')
app.set('port', port)
app.set('trust proxy', true)
if (cluster.isMaster) {
    for (let i = 0; i < numCPUs; i++) {
        cluster.fork()
    }
    cluster.on('listening', onListening)
    cluster.on('error', onError)
    cluster.on('exit', (worker, code, signal) => {
        console.log('worker ' + worker.process.pid + ' died')
        cluster.fork()
    })
} else {
    app.listen(app.get('port'))
}

function normalizePort (val) {
    let port = parseInt(val, 10)
    if (isNaN(port)) {
        // named pipe
        return val
    }
    if (port >= 0) {
        // port number
        return port
    }
    return false
}

function onError (error) {
    if (error.syscall !== 'listen') {
        throw error
    }
    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port

    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges')
            process.exit(1)
            break
        case 'EADDRINUSE':
            console.error(bind + ' is already in use')
            process.exit(1)
            break
        default:
            throw error
    }
}

function onListening (worker, address) {
    debug('worker ' + worker.process.pid + ', listen: ' + address.address + ':' + address.port)
}
